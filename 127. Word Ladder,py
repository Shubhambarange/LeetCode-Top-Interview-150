A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.

Example 2:
Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.


from collections import defaultdict, deque
class Solution:
    def __init__(self):
        self.length = 0
        self.hs = defaultdict(list)

    def visitWordNode(self, queue, visited):
        curr, begin = queue.popleft()
             
        for i in range(self.length):
            inter = curr[:i] + "*" + curr[i+1:]

            for word in self.hs[inter]:
                if word in visited and visited[word][1] != begin:
                    return visited[curr][0] + visited[word][0]
            
                if word not in visited:
                    visited[word] = (visited[curr][0] + 1, begin)
                    queue.append((word, begin))

        return 0 
    
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        
        if endWord not in wordList or not endWord or not beginWord or not wordList:
            return 0

        self.length = len(beginWord)
        
        for word in wordList:
            for i in range(self.length):
                self.hs[word[:i] + "*" + word[i+1:]].append(word)

        queue = deque([(beginWord, True), (endWord, False)])
        visited = {beginWord : (1, True), endWord: (1, False)} 
        
        ans = None

        while queue:
            ans = self.visitWordNode(queue, visited)

            if ans:
                return ans

        return 0


